# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FriendsList.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import asyncio
import arez
import urllib.request
import os
import traceback
from datetime import datetime, date

dev_id = 0  # Developer ID
auth_key = ""  # Auth Key

name = ""
friend_list = []
offline = []
online = []
avatar_url1 = []
avatar_url2 = []
names1 = []
names2 = []
statuses1 = []
statuses2 = []
rank1 = []
rank2 = []
login1 = []
login2 = []
creation1 = []
creation2 = []


async def friends_list(n):
    global friend_list, offline, online, avatar_url1, names1, statuses1, rank1, login1, creation1, avatar_url2, names2
    global statuses2, rank2, login2, creation2
    api = arez.PaladinsAPI(dev_id, auth_key)
    p = await api.get_player(n)
    # get players friend list
    friend_list = await p.get_friends()

    for i in range(0, len(friend_list), 1):
        status = (await friend_list[i].get_status()).status.name
        # if the player is online
        if status != "Offline" and status != "Unknown" and friend_list[i].private is False:
            p = await api.get_player(friend_list[i].id)
            # add it to the online list
            online.append(p)
        # if not
        elif status == "Offline" and friend_list[i].private is False:
            p = await api.get_player(friend_list[i].id)
            # then add it to the offline list
            offline.append(p)

    for i in range(0, len(online), 1):
        avatar_url1.append(online[i].avatar_url)
        names1.append(online[i].name)
        statuses1.append((await online[i].get_status()).status.name)
        rank1.append(online[i].ranked_keyboard.rank.name)
        login1.append("Now")
        day = string_day(str(online[i].created_at.day))
        creation1.append(day + "\n" + month_string(online[i].created_at.month) + "\n" +
                         str(online[i].created_at.year))

    for i in range(0, len(offline), 1):
        avatar_url2.append(offline[i].avatar_url)
        names2.append(offline[i].name)
        statuses2.append((await offline[i].get_status()).status.name)
        rank2.append(offline[i].ranked_keyboard.rank.name)
        now = datetime.now()
        time = now.time()
        date1 = datetime.date(now)
        login2.append(grab_time(date1, time, offline[i]))
        day = string_day(str(offline[i].created_at.day))
        creation2.append(day + "\n" + month_string(offline[i].created_at.month) + "\n" +
                         str(offline[i].created_at.year))

    if len(offline) == 0 and len(online) == 0 :
        await api.close()
        return False
    await api.close()
    return True


def grab_time(d, t, p):
    if (d - p.last_login.date()).days > 0:
        if (d - p.last_login.date()).days >= 365:
            year = (d - p.last_login.date()).days // 365
            if year == 1:
                date1 = str(year) + " year\nago"
            else:
                date1 = str(year) + " years\nago"
        elif (d - p.last_login.date()).days == 1:
            date1 = str((d - p.last_login.date()).days) + " day\nago"
        else:
            date1 = str((d - p.last_login.date()).days) + " days\nago"
        return date1
    else:
        date1 = datetime.combine(date.today(), t) - datetime.combine(date.today(), p.last_login.time())
        if date1.seconds > 0:
            if date1.seconds >= 3600:
                time = date1.seconds//3600
                if time == 1:
                    time = str(time) + " hour\nago"
                else:
                    time = str(time) + " hours\nago"
            elif date1.seconds >= 60:
                time = date1.seconds//60
                if time == 1:
                    time = str(time) + " minute\nago"
                else:
                    time = str(time) + " minutes\nago"
            else:
                time = date1.seconds
                if time == 1:
                    time = str(time) + " second\nago"
                else:
                    time = str(time) + " seconds\nago"
        else:
            time = "Now"
        return time


def string_day(d):
    if len(d) != 2:
        d = "0" + d
    return d


def month_string(x):
    switcher = {1: "January", 2: "February", 3: "March", 4: "April", 5: "May", 6: "June", 7: "July", 8: "August",
                9: "September", 10: "October", 11: "November", 12: "December"}
    return switcher.get(x, lambda: "Error")


class Ui_FriendsList(object):
    def __init__(self, x, y, z):
        global name, dev_id, auth_key
        name = x
        dev_id = y
        auth_key = z

    def setupUi(self, FriendsList):
        FriendsList.setObjectName("FriendsList")
        FriendsList.setFixedSize(640, 900)
        FriendsList.setStyleSheet("background-color: black;")
        self.centralwidget = QtWidgets.QWidget(FriendsList)
        self.centralwidget.setObjectName("centralwidget")
        self.Players = QtWidgets.QLabel(self.centralwidget)
        self.Players.setGeometry(QtCore.QRect(40, 70, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.Players.setFont(font)
        self.Players.setObjectName("Players")
        self.Players.setStyleSheet("color: #cccccc;")
        self.Statuses = QtWidgets.QLabel(self.centralwidget)
        self.Statuses.setGeometry(QtCore.QRect(160, 70, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.Statuses.setFont(font)
        self.Statuses.setObjectName("Statuses")
        self.Statuses.setStyleSheet("color: #cccccc;")
        self.Ranks = QtWidgets.QLabel(self.centralwidget)
        self.Ranks.setGeometry(QtCore.QRect(270, 70, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.Ranks.setFont(font)
        self.Ranks.setObjectName("Ranks")
        self.Ranks.setStyleSheet("color: #cccccc;")
        self.LastLogins = QtWidgets.QLabel(self.centralwidget)
        self.LastLogins.setGeometry(QtCore.QRect(360, 70, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.LastLogins.setFont(font)
        self.LastLogins.setObjectName("LastLogins")
        self.LastLogins.setStyleSheet("color: #cccccc;")
        self.Creations = QtWidgets.QLabel(self.centralwidget)
        self.Creations.setGeometry(QtCore.QRect(500, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.Creations.setFont(font)
        self.Creations.setObjectName("Creations")
        self.Creations.setStyleSheet("color: #cccccc;")
        self.backBtn = QtWidgets.QPushButton(self.centralwidget)
        self.backBtn.setGeometry(QtCore.QRect(0, 0, 110, 50))
        font = QtGui.QFont()
        font.setFamily("Tw Cen MT")
        font.setPointSize(14)
        self.backBtn.setFont(font)
        self.backBtn.setObjectName("backBtn")
        self.backBtn.setStyleSheet("background-color: grey; color: black;")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(10, 100, 621, 741))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 619, 739))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        FriendsList.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(FriendsList)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 26))
        self.menubar.setObjectName("menubar")
        FriendsList.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(FriendsList)
        self.statusbar.setObjectName("statusbar")
        FriendsList.setStatusBar(self.statusbar)

        self.backBtn.clicked.connect(self.goback)
        self.backBtn.clicked.connect(FriendsList.close)

        loop = asyncio.get_event_loop()
        hasFriends = loop.run_until_complete(friends_list(name))

        if hasFriends:
            self.set_images()
        else:
            # create an label to notify user
            self.invalid = QtWidgets.QLabel(self.centralwidget)
            # set style
            self.invalid.setStyleSheet("color: #cccccc;")
            # set font
            font = QtGui.QFont()
            font.setFamily("Tw Cen MT Condensed Extra Bold")
            font.setPointSize(28)
            self.invalid.setFont(font)
            # set object name
            self.invalid.setObjectName("invalid")
            # display username and players status
            self.invalid.setText("You have no friends :(")
            # adjust size
            self.invalid.adjustSize()
            # and center the text
            self.invalid.move((FriendsList.width() - self.invalid.width()) // 2,
                              (FriendsList.height() - self.invalid.height()) // 2)

        self.retranslateUi(FriendsList)
        QtCore.QMetaObject.connectSlotsByName(FriendsList)


    def set_images(self):
        temp = 0
        for i in range(0, len(online), 1):
            try:
                self.avatar = QtWidgets.QLabel(self.scrollAreaWidgetContents)
                image = QtGui.QImage()
                image.loadFromData(urllib.request.urlopen(avatar_url1[i]).read())
                self.avatar.show()
                self.avatar.setGeometry(QtCore.QRect(30, 110*i + 20, 70, 70))
                self.avatar.setPixmap(QtGui.QPixmap(image))
                self.avatar.setScaledContents(True)
            except Exception:
                self.avatar = QtWidgets.QLabel(self.scrollAreaWidgetContents)
                self.avatar.setStyleSheet("color: #cccccc;")
                font = QtGui.QFont()
                font.setFamily("Tw Cen MT Condensed Extra Bold")
                font.setPointSize(26)
                self.avatar.setFont(font)
                self.avatar.setObjectName("avatar")
                self.avatar.setText("New")
                self.avatar.adjustSize()
            if i == len(online) - 1:
                temp = i + 1
        for i in range(0, len(offline), 1):
            try:
                self.avatar = QtWidgets.QLabel(self.scrollAreaWidgetContents)
                image = QtGui.QImage()
                image.loadFromData(urllib.request.urlopen(avatar_url2[i]).read())
                self.avatar.show()
                self.avatar.setGeometry(QtCore.QRect(30, 110*(i + temp) + 20, 70, 70))
                self.avatar.setPixmap(QtGui.QPixmap(image))
                self.avatar.setScaledContents(True)
            except Exception:
                self.avatar = QtWidgets.QLabel(self.scrollAreaWidgetContents)
                self.avatar.setStyleSheet("color: #cccccc;")
                font = QtGui.QFont()
                font.setFamily("Tw Cen MT Condensed Extra Bold")
                font.setPointSize(26)
                self.avatar.setFont(font)
                self.avatar.setObjectName("avatar")
                self.avatar.setText("New")
                self.avatar.adjustSize()

    def goback(self):
        global name, dev_id, auth_key, logfile
        # import ui of previous window
        from LiveorFriends import Ui_LiveMatchorFriendsWindow
        try:
            # create window
            self.window = QtWidgets.QMainWindow()
            # grabs ui of second window
            self.ui = Ui_LiveMatchorFriendsWindow(name, dev_id, auth_key)
            # sets up the second ui in the new window
            self.ui.setupUi(self.window)
            # set title
            self.window.setWindowTitle("Paladins Live Beta 1.0")
            # display new window
            self.window.show()
        except Exception:
            username = os.getlogin()
            with open(f"C:\\Users\\{username}\\Desktop\\PaladinsLiveBeta-Error.log", "a") as logfile:
                traceback.print_exc(file=logfile)
            raise

    def retranslateUi(self, FriendsList):
        _translate = QtCore.QCoreApplication.translate
        FriendsList.setWindowTitle(_translate("FriendsList", "FriendsList"))
        self.Players.setText(_translate("FriendsList", "Player:"))
        self.Statuses.setText(_translate("FriendsList", "Status:"))
        self.Ranks.setText(_translate("FriendsList", "Rank:"))
        self.LastLogins.setText(_translate("FriendsList", "Last Login:"))
        self.Creations.setText(_translate("FriendsList", "Creation:"))
        self.backBtn.setText(_translate("FriendsList", "Esc"))
        self.backBtn.setShortcut(_translate("FriendsList", "Esc"))
